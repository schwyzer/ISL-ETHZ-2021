#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import time
# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
#pause()
x = True
t = False

while(x == True):
    if t:
        for i in range(6):
            a = r.recvuntil(b"followed by enter:\n")
        t = False
    else:
        a = r.recvuntil(b"followed by enter:\n")
    #time.sleep(0.1)
    b = a.split(b"\n")
    first = b[0].split(b' ')[-1]
    second = b[1].split(b' ')[-1]
    fruits = b[-3].split(b' ')[-1]
    if int(first.decode(), 16) == int(second.decode(), 16):
        #print(first)
        #print(second)
        r.sendline(b'q\n')
        x = False
        print(r.recvall())
        exit()
    elif int(fruits.decode(), 10) < 17:
        if int(first.decode(), 16) != int(second.decode(), 16):
            r.sendline(b'A')
    else:
        if int(first.decode(), 16) < int(second.decode(), 16):
            #r.sendline(b'ssddww')
            r.sendline(b'd')
            #t = True
        elif int(first.decode(), 16) > int(second.decode(), 16):
            #r.sendline(b'A')
            r.sendline(b'a')



#for i in range(100):
#    print(r.recvline())

#print(r.recvall())

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

